/**
 * Simulation class.
 * 
 * @author Nakul Talwar
 */
public class Simulation
{
    //Total simulation time in simulated seconds
    private static final int SimTime = 12600;
    //Stores current time during each simulation run in simulated seconds
    private int CurrentTime;
    //Stores the amount of time to wait before adding a new customer to the market
    private int AddNewCustomerInterval;
    //Incrementer to count time units from the time a customer enters the market to when another customer is added
    private int AddNewCustomerRunningInterval;
    //Object for generating arrival times in a Gaussian distribution
    private GaussianGenerator ArrivalTimeGenerator;
    //Object to be used for generating customer needs
    private ItemNeedGenerator NeedGen;
    //Object to be used for generating customer cities
    private CityGenerator CityGen;
    //Object to be used storing customers generated by this simulation
    private TopLevelContainer TopCont;
    /**
     * Default constructor.
     */
    public Simulation(CityContainer CityCont, TopLevelContainer TopCont)
    {
        NeedGen = new ItemNeedGenerator();
        CityGen = new CityGenerator(CityCont);
        this.TopCont = TopCont;
        CurrentTime = 0;
        AddNewCustomerInterval=0;
        AddNewCustomerRunningInterval=0;
        ArrivalTimeGenerator = new GaussianGenerator(61,31);
    }

    /**
     * Method that runs the simulation and accordingly generates customers
     * 
     * @return Returns the modified top level cotainer
     */
    public TopLevelContainer run(){
        while(true){
            //When the current time reaches the total time, the simulation stops and the modified container is returned
            if(CurrentTime == SimTime){
                return TopCont;
            }
            //At the beginning of the simulation a new customer will always be added
            //The interval will be set according to the generator
            if(CurrentTime == 0){
                addCustomer();
                //Absolute value is taken to prevent negative values
                AddNewCustomerInterval = Math.abs(ArrivalTimeGenerator.generate());
                AddNewCustomerRunningInterval = 0;
            }
            //When the incrementer reaches the value of the set interval a new customer is added 
            if(AddNewCustomerInterval == AddNewCustomerRunningInterval){
                addCustomer();
                //Absolute value is taken to prevent negative values
                AddNewCustomerInterval = Math.abs(ArrivalTimeGenerator.generate());
                if(AddNewCustomerInterval == 0){AddNewCustomerInterval++;}
                AddNewCustomerRunningInterval = 0;
            }
            AddNewCustomerRunningInterval++;
            CurrentTime++; 
        }
    }

    /**
     * Method that adds a customer to the top level container
     */
    private void addCustomer(){
        TopCont.add(new Customer(TopCont.size()+1, CityGen.generate(), NeedGen.generateBakedNeed(),NeedGen.generateMeatNeed(), 
                NeedGen.generateDairyNeed(), NeedGen.generateFruitNeed(), NeedGen.generateVegNeed(), NeedGen.generateBevNeed()));
    }
}
